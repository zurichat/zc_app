// Mocks generated by Mockito 5.0.15 from annotations
// in hng/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;
import 'dart:io' as _i24;
import 'dart:ui' as _i15;

import 'package:centrifuge/centrifuge.dart' as _i22;
import 'package:dio/dio.dart' as _i3;
import 'package:flutter/material.dart' as _i12;
import 'package:zurichat/models/api_response.dart' as _i23;
import 'package:zurichat/models/channel_members.dart' as _i20;
import 'package:zurichat/models/channel_model.dart' as _i19;
import 'package:zurichat/models/channels_search_model.dart' as _i29;
import 'package:zurichat/models/organization_member_model.dart' as _i7;
import 'package:zurichat/models/organization_model.dart' as _i6;
import 'package:zurichat/models/pinned_message_model.dart' as _i18;
import 'package:zurichat/models/user_model.dart' as _i9;
import 'package:zurichat/models/user_search_model.dart' as _i24;
import 'package:zurichat/package/base/jump_to_request/jump_to_api.dart' as _i28;
import 'package:zurichat/package/base/server-request/api/zuri_api.dart' as _i5;
import 'package:zurichat/package/base/server-request/channels/channels_api_service.dart'
    as _i17;
import 'package:zurichat/package/base/server-request/dms/dms_api_service.dart'
    as _i16;
import 'package:zurichat/package/base/server-request/organization_request/organization_api_service.dart'
    as _i31;
import 'package:zurichat/services/centrifuge_service.dart' as _i21;
import 'package:zurichat/services/connectivity_service.dart' as _i26;
import 'package:zurichat/services/local_storage_services.dart' as _i10;
import 'package:zurichat/services/media_service.dart' as _i30;
import 'package:zurichat/services/user_service.dart' as _i8;
import 'package:zurichat/utilities/enums.dart' as _i27;
import 'package:zurichat/utilities/failures.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/stacked_services.dart' as _i11;
import 'package:stacked_themes/src/theme_manager.dart' as _i14;
import 'package:stacked_themes/src/theme_service.dart' as _i13;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeStreamController_0<T> extends _i1.Fake
    implements _i2.StreamController<T> {}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i2.StreamSubscription<T> {}

class _FakeDio_2 extends _i1.Fake implements _i3.Dio {}

class _FakeFailure_3 extends _i1.Fake implements _i4.Failure {}

class _FakeZuriApi_4 extends _i1.Fake implements _i5.ZuriApi {}

class _FakeOrganizationModel_5 extends _i1.Fake
    implements _i6.OrganizationModel {}

class _FakeOrganizationMemberModelList_6 extends _i1.Fake
    implements _i7.OrganizationMemberModelList {}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i8.UserService {
  @override
  set organizationModel(_i6.OrganizationModel? _organizationModel) => super
      .noSuchMethod(Invocation.setter(#organizationModel, _organizationModel),
          returnValueForMissingStub: null);
  @override
  String get currentOrgId =>
      (super.noSuchMethod(Invocation.getter(#currentOrgId), returnValue: '')
          as String);
  @override
  String get currentOrgName =>
      (super.noSuchMethod(Invocation.getter(#currentOrgName), returnValue: '')
          as String);
  @override
  String get currentOrgLogo =>
      (super.noSuchMethod(Invocation.getter(#currentOrgLogo), returnValue: '')
          as String);
  @override
  String get currentOrgUrl =>
      (super.noSuchMethod(Invocation.getter(#currentOrgUrl), returnValue: '')
          as String);
  @override
  String get authToken =>
      (super.noSuchMethod(Invocation.getter(#authToken), returnValue: '')
          as String);
  @override
  String get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: '')
          as String);
  @override
  String get memberId =>
      (super.noSuchMethod(Invocation.getter(#memberId), returnValue: '')
          as String);
  @override
  String get userEmail =>
      (super.noSuchMethod(Invocation.getter(#userEmail), returnValue: '')
          as String);
  @override
  void setUserDetails(_i9.UserModel? user) =>
      super.noSuchMethod(Invocation.method(#setUserDetails, [user]),
          returnValueForMissingStub: null);
  @override
  void setOrganization() =>
      super.noSuchMethod(Invocation.method(#setOrganization, []),
          returnValueForMissingStub: null);
  @override
  void setCurrentOrganizationId(String? currentOrgId) => super.noSuchMethod(
      Invocation.method(#setCurrentOrganizationId, [currentOrgId]),
      returnValueForMissingStub: null);
  @override
  void setUserAndToken(
          {String? authToken, String? userId, String? userEmail}) =>
      super.noSuchMethod(
          Invocation.method(#setUserAndToken, [],
              {#authToken: authToken, #userId: userId, #userEmail: userEmail}),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SharedPreferenceLocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferenceLocalStorage extends _i1.Mock
    implements _i10.SharedPreferenceLocalStorage {
  @override
  _i2.Future<dynamic> setBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setDouble(String? key, num? value) =>
      (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setStringList, [key, value]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setMap(String? key, Map<dynamic, dynamic>? map) =>
      (super.noSuchMethod(Invocation.method(#setMap, [key, map]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setList(String? key, List<dynamic>? map) =>
      (super.noSuchMethod(Invocation.method(#setList, [key, map]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);
  @override
  _i2.Future<Map<dynamic, dynamic>> getMap(String? key) =>
      (super.noSuchMethod(Invocation.method(#getMap, [key]),
              returnValue:
                  Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}))
          as _i2.Future<Map<dynamic, dynamic>>);
  @override
  List<dynamic> getList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getList, [key]),
          returnValue: <dynamic>[]) as List<dynamic>);
  @override
  _i2.Future<bool?> clearData(String? key) =>
      (super.noSuchMethod(Invocation.method(#clearData, [key]),
          returnValue: Future<bool?>.value()) as _i2.Future<bool?>);
  @override
  _i2.Future<bool?> clearStorage() =>
      (super.noSuchMethod(Invocation.method(#clearStorage, []),
          returnValue: Future<bool?>.value()) as _i2.Future<bool?>);
  @override
  _i2.Future<dynamic> setInt(String? key, int? value) =>
      (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i11.NavigationService {
  @override
  String get previousRoute =>
      (super.noSuchMethod(Invocation.getter(#previousRoute), returnValue: '')
          as String);
  @override
  String get currentRoute =>
      (super.noSuchMethod(Invocation.getter(#currentRoute), returnValue: '')
          as String);
  @override
  _i12.GlobalKey<_i12.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(#nestedNavigationKey, [index]))
          as _i12.GlobalKey<_i12.NavigatorState>?);
  @override
  void config(
          {bool? enableLog,
          bool? defaultPopGesture,
          bool? defaultOpaqueRoute,
          Duration? defaultDurationTransition,
          bool? defaultGlobalState,
          String? defaultTransition}) =>
      super.noSuchMethod(
          Invocation.method(#config, [], {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransition: defaultTransition
          }),
          returnValueForMissingStub: null);
  @override
  _i2.Future<T?>? navigateWithTransition<T>(_i12.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i12.Curve? curve,
          _i11.Bindings? binding,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i11.Transition? transitionClass}) =>
      (super.noSuchMethod(Invocation.method(#navigateWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #binding: binding,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? replaceWithTransition<T>(_i12.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i12.Curve? curve,
          _i11.Bindings? binding,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i11.Transition? transitionClass}) =>
      (super.noSuchMethod(Invocation.method(#replaceWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #binding: binding,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass
      })) as _i2.Future<T?>?);
  @override
  bool back<T>({T? result, int? id}) => (super.noSuchMethod(
      Invocation.method(#back, [], {#result: result, #id: id}),
      returnValue: false) as bool);
  @override
  void popUntil(_i12.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void popRepeated(int? popTimes) =>
      super.noSuchMethod(Invocation.method(#popRepeated, [popTimes]),
          returnValueForMissingStub: null);
  @override
  _i2.Future<T?>? navigateTo<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#navigateTo, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? navigateToView<T>(_i12.Widget? view,
          {dynamic arguments,
          int? id,
          bool? opaque,
          _i12.Curve? curve,
          _i11.Bindings? binding,
          Duration? duration,
          bool? fullscreenDialog = false,
          bool? popGesture,
          bool? preventDuplicates = true,
          _i11.Transition? transition}) =>
      (super.noSuchMethod(Invocation.method(#navigateToView, [
        view
      ], {
        #arguments: arguments,
        #id: id,
        #opaque: opaque,
        #curve: curve,
        #binding: binding,
        #duration: duration,
        #fullscreenDialog: fullscreenDialog,
        #popGesture: popGesture,
        #preventDuplicates: preventDuplicates,
        #transition: transition
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? replaceWith<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearStackAndShow<T>(String? routeName,
          {dynamic arguments, int? id, Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearStackAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #parameters: parameters
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearTillFirstAndShow<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearTillFirstAndShowView<T>(_i12.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShowView, [view],
          {#arguments: arguments, #id: id})) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? pushNamedAndRemoveUntil<T>(String? routeName,
          {_i12.RoutePredicate? predicate, dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#pushNamedAndRemoveUntil, [
        routeName
      ], {
        #predicate: predicate,
        #arguments: arguments,
        #id: id
      })) as _i2.Future<T?>?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackbarService extends _i1.Mock implements _i11.SnackbarService {
  @override
  void registerSnackbarConfig(_i11.SnackbarConfig? config) =>
      super.noSuchMethod(Invocation.method(#registerSnackbarConfig, [config]),
          returnValueForMissingStub: null);
  @override
  void registerCustomSnackbarconfig(
          {dynamic customData, _i11.SnackbarConfig? config}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomSnackbarconfig, [],
              {#customData: customData, #config: config}),
          returnValueForMissingStub: null);
  @override
  void registerCustomMainButtonBuilder(
          {dynamic variant,
          _i12.Widget Function(String?, Function?)? builder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomMainButtonBuilder, [],
              {#variant: variant, #builder: builder}),
          returnValueForMissingStub: null);
  @override
  void registerCustomSnackbarConfig(
          {dynamic variant,
          _i11.SnackbarConfig? config,
          _i11.SnackbarConfig Function()? configBuilder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomSnackbarConfig, [], {
            #variant: variant,
            #config: config,
            #configBuilder: configBuilder
          }),
          returnValueForMissingStub: null);
  @override
  void showSnackbar(
          {String? title = r'',
          String? message,
          dynamic Function(dynamic)? onTap,
          Duration? duration = const Duration(seconds: 3),
          String? mainButtonTitle,
          void Function()? onMainButtonTapped}) =>
      super.noSuchMethod(
          Invocation.method(#showSnackbar, [], {
            #title: title,
            #message: message,
            #onTap: onTap,
            #duration: duration,
            #mainButtonTitle: mainButtonTitle,
            #onMainButtonTapped: onMainButtonTapped
          }),
          returnValueForMissingStub: null);
  @override
  _i2.Future<dynamic>? showCustomSnackBar(
          {String? message,
          dynamic customData,
          dynamic variant,
          String? title,
          String? mainButtonTitle,
          void Function()? onMainButtonTapped,
          Function? onTap,
          Duration? duration = const Duration(seconds: 1)}) =>
      (super.noSuchMethod(Invocation.method(#showCustomSnackBar, [], {
        #message: message,
        #customData: customData,
        #variant: variant,
        #title: title,
        #mainButtonTitle: mainButtonTitle,
        #onMainButtonTapped: onMainButtonTapped,
        #onTap: onTap,
        #duration: duration
      })) as _i2.Future<dynamic>?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ThemeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeService extends _i1.Mock implements _i13.ThemeService {
  @override
  int get themeCount =>
      (super.noSuchMethod(Invocation.getter(#themeCount), returnValue: 0)
          as int);
  @override
  bool get isDarkMode =>
      (super.noSuchMethod(Invocation.getter(#isDarkMode), returnValue: false)
          as bool);
  @override
  _i13.ThemeManagerMode get selectedThemeMode =>
      (super.noSuchMethod(Invocation.getter(#selectedThemeMode),
          returnValue: _i13.ThemeManagerMode.light) as _i13.ThemeManagerMode);
  @override
  void setThemeManager(_i14.ThemeManager? manager) =>
      super.noSuchMethod(Invocation.method(#setThemeManager, [manager]),
          returnValueForMissingStub: null);
  @override
  _i2.Future<dynamic> selectThemeAtIndex(int? themeIndex) =>
      (super.noSuchMethod(Invocation.method(#selectThemeAtIndex, [themeIndex]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  void toggleDarkLightTheme() =>
      super.noSuchMethod(Invocation.method(#toggleDarkLightTheme, []),
          returnValueForMissingStub: null);
  @override
  void setThemeMode(_i13.ThemeManagerMode? themeManagerMode) =>
      super.noSuchMethod(Invocation.method(#setThemeMode, [themeManagerMode]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i11.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i11.DialogBuilder>? builders) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilders, [builders]),
          returnValueForMissingStub: null);
  @override
  void registerCustomDialogBuilder(
          {dynamic variant,
          _i12.Widget Function(_i12.BuildContext, _i11.DialogRequest<dynamic>,
                  dynamic Function(_i11.DialogResponse<dynamic>))?
              builder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilder, [],
              {#variant: variant, #builder: builder}),
          returnValueForMissingStub: null);
  @override
  _i2.Future<_i11.DialogResponse<dynamic>?> showDialog(
          {String? title,
          String? description,
          String? cancelTitle,
          _i15.Color? cancelTitleColor,
          String? buttonTitle = r'Ok',
          _i15.Color? buttonTitleColor,
          bool? barrierDismissible = false,
          _i11.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #cancelTitleColor: cancelTitleColor,
                #buttonTitle: buttonTitle,
                #buttonTitleColor: buttonTitleColor,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i11.DialogResponse<dynamic>?>.value())
          as _i2.Future<_i11.DialogResponse<dynamic>?>);
  @override
  _i2.Future<_i11.DialogResponse<T>?> showCustomDialog<T, R>(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i15.Color? barrierColor = const _i15.Color(2315255808),
          bool? barrierDismissible = false,
          String? barrierLabel = r'',
          dynamic customData,
          R? data}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomDialog, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #barrierLabel: barrierLabel,
                #customData: customData,
                #data: data
              }),
              returnValue: Future<_i11.DialogResponse<T>?>.value())
          as _i2.Future<_i11.DialogResponse<T>?>);
  @override
  _i2.Future<_i11.DialogResponse<dynamic>?> showConfirmationDialog(
          {String? title,
          String? description,
          String? cancelTitle = r'Cancel',
          String? confirmationTitle = r'Ok',
          bool? barrierDismissible = false,
          _i11.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showConfirmationDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #confirmationTitle: confirmationTitle,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i11.DialogResponse<dynamic>?>.value())
          as _i2.Future<_i11.DialogResponse<dynamic>?>);
  @override
  void completeDialog(_i11.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#completeDialog, [response]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i11.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i11.SheetBuilder>? builders) =>
      super.noSuchMethod(Invocation.method(#setCustomSheetBuilders, [builders]),
          returnValueForMissingStub: null);
  @override
  _i2.Future<_i11.SheetResponse<dynamic>?> showBottomSheet(
          {String? title,
          String? description,
          String? confirmButtonTitle = r'Ok',
          String? cancelButtonTitle,
          bool? enableDrag = true,
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration,
          bool? ignoreSafeArea}) =>
      (super.noSuchMethod(
              Invocation.method(#showBottomSheet, [], {
                #title: title,
                #description: description,
                #confirmButtonTitle: confirmButtonTitle,
                #cancelButtonTitle: cancelButtonTitle,
                #enableDrag: enableDrag,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration,
                #ignoreSafeArea: ignoreSafeArea
              }),
              returnValue: Future<_i11.SheetResponse<dynamic>?>.value())
          as _i2.Future<_i11.SheetResponse<dynamic>?>);
  @override
  _i2.Future<_i11.SheetResponse<T>?> showCustomSheet<T, R>(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i15.Color? barrierColor = const _i15.Color(2315255808),
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          String? barrierLabel = r'',
          dynamic customData,
          R? data,
          bool? enableDrag = true,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration,
          bool? ignoreSafeArea}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomSheet, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #barrierLabel: barrierLabel,
                #customData: customData,
                #data: data,
                #enableDrag: enableDrag,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration,
                #ignoreSafeArea: ignoreSafeArea
              }),
              returnValue: Future<_i11.SheetResponse<T>?>.value())
          as _i2.Future<_i11.SheetResponse<T>?>);
  @override
  void completeSheet(_i11.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#completeSheet, [response]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DMApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDMApiService extends _i1.Mock implements _i16.DMApiService {
  @override
  _i2.Future<dynamic> getActiveDms() =>
      (super.noSuchMethod(Invocation.method(#getActiveDms, []),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> getAllUsersInOrg() =>
      (super.noSuchMethod(Invocation.method(#getAllUsersInOrg, []),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ChannelsApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChannelsApiService extends _i1.Mock
    implements _i17.ChannelsApiService {
  @override
  _i2.StreamController<String> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController_0<String>())
          as _i2.StreamController<String>);
  @override
  set controller(_i2.StreamController<String>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  _i2.Future<List<dynamic>> getActiveChannels() =>
      (super.noSuchMethod(Invocation.method(#getActiveChannels, []),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<String> getChannelSocketId(String? channelId) =>
      (super.noSuchMethod(Invocation.method(#getChannelSocketId, [channelId]),
          returnValue: Future<String>.value('')) as _i2.Future<String>);
  @override
  _i2.Future<Map<dynamic, dynamic>?> joinChannel(String? channelId) =>
      (super.noSuchMethod(Invocation.method(#joinChannel, [channelId]),
              returnValue: Future<Map<dynamic, dynamic>?>.value())
          as _i2.Future<Map<dynamic, dynamic>?>);
  @override
  dynamic getChanelCreator(String? channelId) =>
      super.noSuchMethod(Invocation.method(#getChanelCreator, [channelId]));
  @override
  _i2.Future<List<dynamic>> getChannelMessages(String? channelId) =>
      (super.noSuchMethod(Invocation.method(#getChannelMessages, [channelId]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<List<_i18.PinnedMessage>> getChannelPinnedMessages(
          String? channelId) =>
      (super.noSuchMethod(
          Invocation.method(#getChannelPinnedMessages, [channelId]),
          returnValue: Future<List<_i18.PinnedMessage>>.value(
              <_i18.PinnedMessage>[])) as _i2.Future<List<_i18.PinnedMessage>>);
  @override
  _i2.Future<bool> changeChannelMessagePinnedState(
          String? channelId, String? messageId, String? userId, bool? pinned) =>
      (super.noSuchMethod(
          Invocation.method(#changeChannelMessagePinnedState,
              [channelId, messageId, userId, pinned]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<dynamic> sendChannelMessages(
          String? channelId, String? userId, String? message,
          [List<String>? media]) =>
      (super.noSuchMethod(
          Invocation.method(
              #sendChannelMessages, [channelId, userId, message, media]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i19.ChannelModel>> fetchChannel() =>
      (super.noSuchMethod(Invocation.method(#fetchChannel, []),
              returnValue:
                  Future<List<_i19.ChannelModel>>.value(<_i19.ChannelModel>[]))
          as _i2.Future<List<_i19.ChannelModel>>);
  @override
  _i2.Future<bool> createChannels(
          {String? name,
          String? description,
          bool? private,
          String? email,
          String? id}) =>
      (super.noSuchMethod(
          Invocation.method(#createChannels, [], {
            #name: name,
            #description: description,
            #private: private,
            #email: email,
            #id: id
          }),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> deleteChannel(String? orgId, String? channelId) =>
      (super.noSuchMethod(Invocation.method(#deleteChannel, [orgId, channelId]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<List<_i20.ChannelMembermodel>?> getChannelMembers(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#getChannelMembers, [id]),
              returnValue: Future<List<_i20.ChannelMembermodel>?>.value())
          as _i2.Future<List<_i20.ChannelMembermodel>?>);
  @override
  _i2.Future<void>? dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CentrifugeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCentrifugeService extends _i1.Mock implements _i21.CentrifugeService {
  @override
  _i2.StreamController<dynamic> get messageStreamController =>
      (super.noSuchMethod(Invocation.getter(#messageStreamController),
              returnValue: _FakeStreamController_0<dynamic>())
          as _i2.StreamController<dynamic>);
  @override
  set messageStreamController(
          _i2.StreamController<dynamic>? _messageStreamController) =>
      super.noSuchMethod(
          Invocation.setter(#messageStreamController, _messageStreamController),
          returnValueForMissingStub: null);
  @override
  Map<String, _i22.Subscription> get subList =>
      (super.noSuchMethod(Invocation.getter(#subList),
              returnValue: <String, _i22.Subscription>{})
          as Map<String, _i22.Subscription>);
  @override
  set subList(Map<String, _i22.Subscription>? _subList) =>
      super.noSuchMethod(Invocation.setter(#subList, _subList),
          returnValueForMissingStub: null);
  @override
  void disconnect() => super.noSuchMethod(Invocation.method(#disconnect, []),
      returnValueForMissingStub: null);
  @override
  _i2.StreamSubscription<dynamic> listen(
          {String? socketId,
          dynamic channelId,
          dynamic Function(Map<dynamic, dynamic>)? onData}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [], {
                #socketId: socketId,
                #channelId: channelId,
                #onData: onData
              }),
              returnValue: _FakeStreamSubscription_1<dynamic>())
          as _i2.StreamSubscription<dynamic>);
  @override
  _i2.StreamSubscription<dynamic> onNotificationReceived(
          {String? channelId,
          dynamic Function(Map<dynamic, dynamic>)? onData}) =>
      (super.noSuchMethod(
              Invocation.method(#onNotificationReceived, [],
                  {#channelId: channelId, #onData: onData}),
              returnValue: _FakeStreamSubscription_1<dynamic>())
          as _i2.StreamSubscription<dynamic>);
  @override
  bool hasSubscribed(String? socketId) =>
      (super.noSuchMethod(Invocation.method(#hasSubscribed, [socketId]),
          returnValue: false) as bool);
  @override
  _i2.Future<_i2.Stream<dynamic>?> subscribe(String? channelSocketId) =>
      (super.noSuchMethod(Invocation.method(#subscribe, [channelSocketId]),
              returnValue: Future<_i2.Stream<dynamic>?>.value())
          as _i2.Future<_i2.Stream<dynamic>?>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ZuriApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockZuriApi extends _i1.Mock implements _i5.ZuriApi {
  @override
  _i3.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio_2())
          as _i3.Dio);
  @override
  _i2.StreamController<String> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController_0<String>())
          as _i2.StreamController<String>);
  @override
  set controller(_i2.StreamController<String>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  _i2.Future<dynamic> get(String? string,
          {Map<String, dynamic>? queryParameters, String? token}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [string],
              {#queryParameters: queryParameters, #token: token}),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> post(String? string,
          {Map<String, dynamic>? body, String? token}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [string], {#body: body, #token: token}),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> put(String? string,
          {Map<String, dynamic>? body, String? token}) =>
      (super.noSuchMethod(
          Invocation.method(#put, [string], {#body: body, #token: token}),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<_i23.ApiResponse?> patch(String? path,
          {Map<String, dynamic>? body, String? token}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [path], {#body: body, #token: token}),
              returnValue: Future<_i23.ApiResponse?>.value())
          as _i2.Future<_i23.ApiResponse?>);
  @override
  _i2.Future<_i23.ApiResponse?> delete(String? string,
          {Map<String, dynamic>? body, String? token}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [string], {#body: body, #token: token}),
          returnValue:
              Future<_i23.ApiResponse?>.value()) as _i2
          .Future<_i23.ApiResponse?>);
  @override
  _i2.Future<dynamic> login({String? email, String? password, dynamic token}) =>
      (super.noSuchMethod(
          Invocation.method(
              #login, [], {#email: email, #password: password, #token: token}),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> signUp(
          {String? email,
          String? password,
          String? firstName,
          String? lastName,
          String? displayName,
          String? phoneNumber,
          String? token}) =>
      (super.noSuchMethod(
          Invocation.method(#signUp, [], {
            #email: email,
            #password: password,
            #firstName: firstName,
            #lastName: lastName,
            #displayName: displayName,
            #phoneNumber: phoneNumber,
            #token: token
          }),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i6.OrganizationModel>> fetchListOfOrganizations(
          dynamic token) =>
      (super.noSuchMethod(Invocation.method(#fetchListOfOrganizations, [token]),
              returnValue: Future<List<_i6.OrganizationModel>>.value(
                  <_i6.OrganizationModel>[]))
          as _i2.Future<List<_i6.OrganizationModel>>);
  @override
  _i2.Future<List<_i6.OrganizationModel>> getJoinedOrganizations(
          dynamic token, String? email) =>
      (super.noSuchMethod(
              Invocation.method(#getJoinedOrganizations, [token, email]),
              returnValue: Future<List<_i6.OrganizationModel>>.value(
                  <_i6.OrganizationModel>[]))
          as _i2.Future<List<_i6.OrganizationModel>>);
  @override
  _i2.Future<dynamic> fetchOrganizationInfo(String? id, dynamic token) => (super
      .noSuchMethod(Invocation.method(#fetchOrganizationInfo, [id, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> fetchOrganizationByUrl(String? url, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(#fetchOrganizationByUrl, [url, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<bool> joinOrganization(
          String? orgId, String? email, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(#joinOrganization, [orgId, email, token]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<String> createOrganization(String? email, dynamic token) => (super
      .noSuchMethod(Invocation.method(#createOrganization, [email, token]),
          returnValue: Future<String>.value('')) as _i2.Future<String>);
  @override
  _i2.Future<dynamic> updateOrgUrl(String? orgId, String? url, dynamic token) =>
      (super.noSuchMethod(Invocation.method(#updateOrgUrl, [orgId, url, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> updateOrgName(
          String? orgId, String? name, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(#updateOrgName, [orgId, name, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> updateOrgLogo(
          String? orgId, _i24.File? image, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(#updateOrgLogo, [orgId, image, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<void> addMemberToChannel(
          String? channelId, String? orgId, String? userId, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(
              #addMemberToChannel, [channelId, orgId, userId, token]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> addMemberToOrganization(
          String? orgId, String? email, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(#addMemberToOrganization, [orgId, email, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i25.UserSearch>> fetchMembersInOrganization(
          String? orgId, dynamic token) =>
      (super.noSuchMethod(
              Invocation.method(#fetchMembersInOrganization, [orgId, token]),
              returnValue:
                  Future<List<_i25.UserSearch>>.value(<_i25.UserSearch>[]))
          as _i2.Future<List<_i25.UserSearch>>);
  @override
  _i2.Future<dynamic> getChannelSocketId(
          String? channelId, String? orgId, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(#getChannelSocketId, [channelId, orgId, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<dynamic>> getActiveRooms(
          String? orgId, String? userId, dynamic token) =>
      (super.noSuchMethod(
              Invocation.method(#getActiveRooms, [orgId, userId, token]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<List<dynamic>> getActiveDms(String? orgId, dynamic token) =>
      (super.noSuchMethod(Invocation.method(#getActiveDms, [orgId, token]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<Map<dynamic, dynamic>> joinChannel(
          String? channelId, String? userId, String? orgId, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(#joinChannel, [channelId, userId, orgId, token]),
          returnValue:
              Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{})) as _i2
          .Future<Map<dynamic, dynamic>>);
  @override
  _i2.Future<dynamic> getChannelMessages(
          String? channelId, String? orgId, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(#getChannelMessages, [channelId, orgId, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> sendChannelMessages(String? channelId, String? userId,
          String? orgId, String? message, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(
              #sendChannelMessages, [channelId, userId, orgId, message, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<dynamic>> getRepliesToMessages(
          dynamic channelMessageId, dynamic orgId) =>
      (super.noSuchMethod(
          Invocation.method(#getRepliesToMessages, [channelMessageId, orgId]),
          returnValue:
              Future<List<dynamic>>.value(<dynamic>[])) as _i2
          .Future<List<dynamic>>);
  @override
  _i2.Future<bool> addReplyToMessage(String? channelMessageId, dynamic content,
          dynamic files, dynamic orgId, dynamic userId, dynamic channelId) =>
      (super.noSuchMethod(
          Invocation.method(#addReplyToMessage,
              [channelMessageId, content, files, orgId, userId, channelId]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<List<_i19.ChannelModel>> fetchChannel(
          String? orgId, dynamic token) =>
      (super.noSuchMethod(Invocation.method(#fetchChannel, [orgId, token]),
              returnValue:
                  Future<List<_i19.ChannelModel>>.value(<_i19.ChannelModel>[]))
          as _i2.Future<List<_i19.ChannelModel>>);
  @override
  _i2.Future<bool> createChannels(
          {String? name,
          String? owner,
          String? email,
          String? orgId,
          String? description,
          bool? private,
          dynamic token}) =>
      (super.noSuchMethod(
          Invocation.method(#createChannels, [], {
            #name: name,
            #owner: owner,
            #email: email,
            #orgId: orgId,
            #description: description,
            #private: private,
            #token: token
          }),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  dynamic getChannelPage(String? id, String? orgId, dynamic token) => super
      .noSuchMethod(Invocation.method(#getChannelPage, [id, orgId, token]));
  @override
  dynamic getChannelMembers(String? id, String? orgId, dynamic token) => super
      .noSuchMethod(Invocation.method(#getChannelMembers, [id, orgId, token]));
  @override
  dynamic inviteToOrganizationWithNormalMail(
          String? organizationId, dynamic body, dynamic token) =>
      super.noSuchMethod(Invocation.method(
          #inviteToOrganizationWithNormalMail, [organizationId, body, token]));
  @override
  List<_i12.ThemeData> getThemes() =>
      (super.noSuchMethod(Invocation.method(#getThemes, []),
          returnValue: <_i12.ThemeData>[]) as List<_i12.ThemeData>);
  @override
  void sendGetRequest(dynamic endpoint) =>
      super.noSuchMethod(Invocation.method(#sendGetRequest, [endpoint]),
          returnValueForMissingStub: null);
  @override
  _i2.Future<dynamic> sendPostRequest(dynamic body, dynamic endpoint) =>
      (super.noSuchMethod(Invocation.method(#sendPostRequest, [body, endpoint]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> sendPatchRequest(
          dynamic body, dynamic endpoint, dynamic userId) =>
      (super.noSuchMethod(
          Invocation.method(#sendPatchRequest, [body, endpoint, userId]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> allChannelsList(String? currentOrgId, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(#allChannelsList, [currentOrgId, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> joinedChannelsList(
          String? currentOrgId, String? currentUserId, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(
              #joinedChannelsList, [currentOrgId, currentUserId, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> fetchListOfMembers(
          String? currentOrgId, String? channelId, dynamic token) =>
      (super.noSuchMethod(
          Invocation.method(
              #fetchListOfMembers, [currentOrgId, channelId, token]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i4.Failure handleApiError(_i3.DioError? e) =>
      (super.noSuchMethod(Invocation.method(#handleApiError, [e]),
          returnValue: _FakeFailure_3()) as _i4.Failure);
  @override
  _i2.Future<String> uploadImage(_i24.File? image,
          {String? token, String? pluginId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #uploadImage, [image], {#token: token, #pluginId: pluginId}),
          returnValue: Future<String>.value('')) as _i2.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i26.ConnectivityService {
  @override
  bool get hasConnection =>
      (super.noSuchMethod(Invocation.getter(#hasConnection), returnValue: false)
          as bool);
  @override
  set hasConnection(bool? _hasConnection) =>
      super.noSuchMethod(Invocation.setter(#hasConnection, _hasConnection),
          returnValueForMissingStub: null);
  @override
  _i27.ConnectivityStatus get networkStatus => (super.noSuchMethod(
      Invocation.getter(#networkStatus),
      returnValue: _i27.ConnectivityStatus.wifi) as _i27.ConnectivityStatus);
  @override
  set networkStatus(_i27.ConnectivityStatus? _networkStatus) =>
      super.noSuchMethod(Invocation.setter(#networkStatus, _networkStatus),
          returnValueForMissingStub: null);
  @override
  _i2.StreamController<_i27.ConnectivityStatus>
      get connectionChangeController => (super.noSuchMethod(
              Invocation.getter(#connectionChangeController),
              returnValue: _FakeStreamController_0<_i27.ConnectivityStatus>())
          as _i2.StreamController<_i27.ConnectivityStatus>);
  @override
  set connectionChangeController(
          _i2.StreamController<_i27.ConnectivityStatus>?
              _connectionChangeController) =>
      super.noSuchMethod(
          Invocation.setter(
              #connectionChangeController, _connectionChangeController),
          returnValueForMissingStub: null);
  @override
  _i2.Stream<_i27.ConnectivityStatus> get connectionChange =>
      (super.noSuchMethod(Invocation.getter(#connectionChange),
              returnValue: Stream<_i27.ConnectivityStatus>.empty())
          as _i2.Stream<_i27.ConnectivityStatus>);
  @override
  void initialize() => super.noSuchMethod(Invocation.method(#initialize, []),
      returnValueForMissingStub: null);
  @override
  _i2.Future<bool> checkConnection() =>
      (super.noSuchMethod(Invocation.method(#checkConnection, []),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  void onChange() => super.noSuchMethod(Invocation.method(#onChange, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [JumpToApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockJumpToApi extends _i1.Mock implements _i28.JumpToApi {
  @override
  String get allChannelsPath =>
      (super.noSuchMethod(Invocation.getter(#allChannelsPath), returnValue: '')
          as String);
  @override
  String get joinedChannelsPath => (super
          .noSuchMethod(Invocation.getter(#joinedChannelsPath), returnValue: '')
      as String);
  @override
  Map<String, dynamic> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set headers(Map<String, dynamic>? _headers) =>
      super.noSuchMethod(Invocation.setter(#headers, _headers),
          returnValueForMissingStub: null);
  @override
  _i2.Future<List<_i29.ChannelsSearch>> allChannelsList() =>
      (super.noSuchMethod(Invocation.method(#allChannelsList, []),
              returnValue: Future<List<_i29.ChannelsSearch>>.value(
                  <_i29.ChannelsSearch>[]))
          as _i2.Future<List<_i29.ChannelsSearch>>);
  @override
  _i2.Future<List<_i29.ChannelsSearch>> joinedChannelsList() =>
      (super.noSuchMethod(Invocation.method(#joinedChannelsList, []),
              returnValue: Future<List<_i29.ChannelsSearch>>.value(
                  <_i29.ChannelsSearch>[]))
          as _i2.Future<List<_i29.ChannelsSearch>>);
  @override
  _i2.Future<List<_i25.UserSearch>> fetchListOfMembers() => (super.noSuchMethod(
          Invocation.method(#fetchListOfMembers, []),
          returnValue: Future<List<_i25.UserSearch>>.value(<_i25.UserSearch>[]))
      as _i2.Future<List<_i25.UserSearch>>);
  @override
  _i2.Future<List<_i25.NewUser>> fetchList() =>
      (super.noSuchMethod(Invocation.method(#fetchList, []),
              returnValue: Future<List<_i25.NewUser>>.value(<_i25.NewUser>[]))
          as _i2.Future<List<_i25.NewUser>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MediaService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaService extends _i1.Mock implements _i30.MediaService {
  @override
  _i5.ZuriApi get zuriApi => (super.noSuchMethod(Invocation.getter(#zuriApi),
      returnValue: _FakeZuriApi_4()) as _i5.ZuriApi);
  @override
  _i2.Future<_i24.File?> getImage({bool? fromGallery}) => (super.noSuchMethod(
      Invocation.method(#getImage, [], {#fromGallery: fromGallery}),
      returnValue: Future<_i24.File?>.value()) as _i2.Future<_i24.File?>);
  @override
  _i2.Future<_i24.File?> getVideo({bool? fromGallery}) => (super.noSuchMethod(
      Invocation.method(#getVideo, [], {#fromGallery: fromGallery}),
      returnValue: Future<_i24.File?>.value()) as _i2.Future<_i24.File?>);
  @override
  _i2.Future<String?> uploadImage(_i24.File? file, String? pluginId) =>
      (super.noSuchMethod(Invocation.method(#uploadImage, [file, pluginId]),
          returnValue: Future<String?>.value()) as _i2.Future<String?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OrganizationApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizationApiService extends _i1.Mock
    implements _i31.OrganizationApiService {
  @override
  _i2.Future<List<_i6.OrganizationModel>> fetchListOfOrganizations() =>
      (super.noSuchMethod(Invocation.method(#fetchListOfOrganizations, []),
              returnValue: Future<List<_i6.OrganizationModel>>.value(
                  <_i6.OrganizationModel>[]))
          as _i2.Future<List<_i6.OrganizationModel>>);
  @override
  _i2.Future<List<_i6.OrganizationModel>> getJoinedOrganizations() =>
      (super.noSuchMethod(Invocation.method(#getJoinedOrganizations, []),
              returnValue: Future<List<_i6.OrganizationModel>>.value(
                  <_i6.OrganizationModel>[]))
          as _i2.Future<List<_i6.OrganizationModel>>);
  @override
  _i2.Future<_i6.OrganizationModel> fetchOrganizationInfo(String? id) =>
      (super.noSuchMethod(Invocation.method(#fetchOrganizationInfo, [id]),
              returnValue: Future<_i6.OrganizationModel>.value(
                  _FakeOrganizationModel_5()))
          as _i2.Future<_i6.OrganizationModel>);
  @override
  _i2.Future<_i6.OrganizationModel> fetchOrganizationByUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#fetchOrganizationByUrl, [url]),
              returnValue: Future<_i6.OrganizationModel>.value(
                  _FakeOrganizationModel_5()))
          as _i2.Future<_i6.OrganizationModel>);
  @override
  _i2.Future<bool> joinOrganization(String? orgId) =>
      (super.noSuchMethod(Invocation.method(#joinOrganization, [orgId]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<String> createOrganization(String? email) =>
      (super.noSuchMethod(Invocation.method(#createOrganization, [email]),
          returnValue: Future<String>.value('')) as _i2.Future<String>);
  @override
  _i2.Future<void> updateOrgUrl(String? orgId, String? url) =>
      (super.noSuchMethod(Invocation.method(#updateOrgUrl, [orgId, url]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> updateOrgName(String? orgId, String? name) =>
      (super.noSuchMethod(Invocation.method(#updateOrgName, [orgId, name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> updateOrgLogo(String? orgId, String? url) =>
      (super.noSuchMethod(Invocation.method(#updateOrgLogo, [orgId, url]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> addMemberToOrganization(String? orgId, String? email) =>
      (super.noSuchMethod(
          Invocation.method(#addMemberToOrganization, [orgId, email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<List<_i25.UserSearch>> fetchMembersInOrganization(String? orgId) =>
      (super.noSuchMethod(
              Invocation.method(#fetchMembersInOrganization, [orgId]),
              returnValue:
                  Future<List<_i25.UserSearch>>.value(<_i25.UserSearch>[]))
          as _i2.Future<List<_i25.UserSearch>>);
  @override
  _i2.Future<_i7.OrganizationMemberModelList> getOrganizationMemberList(
          String? orgId) =>
      (super.noSuchMethod(
              Invocation.method(#getOrganizationMemberList, [orgId]),
              returnValue: Future<_i7.OrganizationMemberModelList>.value(
                  _FakeOrganizationMemberModelList_6()))
          as _i2.Future<_i7.OrganizationMemberModelList>);
  @override
  String toString() => super.toString();
}
