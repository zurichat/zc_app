// Mocks generated by Mockito 5.3.2 from annotations
// in zurichat/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:io' as _i25;
import 'dart:ui' as _i15;

import 'package:centrifuge/centrifuge.dart' as _i23;
import 'package:dio/dio.dart' as _i3;
import 'package:flutter/material.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/stacked_services.dart' as _i11;
import 'package:stacked_themes/src/theme_manager.dart' as _i14;
import 'package:stacked_themes/src/theme_service.dart' as _i13;
import 'package:zurichat/models/api_response.dart' as _i24;
import 'package:zurichat/models/channel_members.dart' as _i21;
import 'package:zurichat/models/channel_model.dart' as _i20;
import 'package:zurichat/models/channels_search_model.dart' as _i30;
import 'package:zurichat/models/dm_model.dart' as _i17;
import 'package:zurichat/models/organization_member_model.dart' as _i7;
import 'package:zurichat/models/organization_model.dart' as _i6;
import 'package:zurichat/models/pinned_message_model.dart' as _i19;
import 'package:zurichat/models/user_model.dart' as _i9;
import 'package:zurichat/models/user_search_model.dart' as _i26;
import 'package:zurichat/services/app_services/connectivity_service.dart'
    as _i27;
import 'package:zurichat/services/app_services/local_storage_services.dart'
    as _i10;
import 'package:zurichat/services/app_services/media_service.dart' as _i31;
import 'package:zurichat/services/core_services/organization_api_service.dart'
    as _i32;
import 'package:zurichat/services/in_review/jump_to_api.dart' as _i29;
import 'package:zurichat/services/in_review/user_service.dart' as _i8;
import 'package:zurichat/services/messaging_services/centrifuge_rtc_service.dart'
    as _i22;
import 'package:zurichat/services/messaging_services/channels_api_service.dart'
    as _i18;
import 'package:zurichat/services/messaging_services/dms_api_service.dart'
    as _i16;
import 'package:zurichat/utilities/api_handlers/failures.dart' as _i4;
import 'package:zurichat/utilities/api_handlers/zuri_api.dart' as _i5;
import 'package:zurichat/utilities/enums.dart' as _i28;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamController_0<T> extends _i1.SmartFake
    implements _i2.StreamController<T> {
  _FakeStreamController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_1<T> extends _i1.SmartFake
    implements _i2.StreamSubscription<T> {
  _FakeStreamSubscription_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_2 extends _i1.SmartFake implements _i3.Dio {
  _FakeDio_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFailure_3 extends _i1.SmartFake implements _i4.Failure {
  _FakeFailure_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeZuriApi_4 extends _i1.SmartFake implements _i5.ZuriApi {
  _FakeZuriApi_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrganizationModel_5 extends _i1.SmartFake
    implements _i6.OrganizationModel {
  _FakeOrganizationModel_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrganizationMemberModelList_6 extends _i1.SmartFake
    implements _i7.OrganizationMemberModelList {
  _FakeOrganizationMemberModelList_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i8.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set organizationModel(_i6.OrganizationModel? _organizationModel) =>
      super.noSuchMethod(
        Invocation.setter(
          #organizationModel,
          _organizationModel,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get currentOrgId => (super.noSuchMethod(
        Invocation.getter(#currentOrgId),
        returnValue: '',
      ) as String);
  @override
  String get currentOrgName => (super.noSuchMethod(
        Invocation.getter(#currentOrgName),
        returnValue: '',
      ) as String);
  @override
  String get currentOrgLogo => (super.noSuchMethod(
        Invocation.getter(#currentOrgLogo),
        returnValue: '',
      ) as String);
  @override
  String get currentOrgUrl => (super.noSuchMethod(
        Invocation.getter(#currentOrgUrl),
        returnValue: '',
      ) as String);
  @override
  String get authToken => (super.noSuchMethod(
        Invocation.getter(#authToken),
        returnValue: '',
      ) as String);
  @override
  String get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: '',
      ) as String);
  @override
  String get memberId => (super.noSuchMethod(
        Invocation.getter(#memberId),
        returnValue: '',
      ) as String);
  @override
  String get userEmail => (super.noSuchMethod(
        Invocation.getter(#userEmail),
        returnValue: '',
      ) as String);
  @override
  void setUserDetails(_i9.UserModel? user) => super.noSuchMethod(
        Invocation.method(
          #setUserDetails,
          [user],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setOrganization() => super.noSuchMethod(
        Invocation.method(
          #setOrganization,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentOrganizationId(String? currentOrgId) => super.noSuchMethod(
        Invocation.method(
          #setCurrentOrganizationId,
          [currentOrgId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setUserAndToken({
    required String? authToken,
    required String? userId,
    required String? userEmail,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setUserAndToken,
          [],
          {
            #authToken: authToken,
            #userId: userId,
            #userEmail: userEmail,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SharedPreferenceLocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferenceLocalStorage extends _i1.Mock
    implements _i10.SharedPreferenceLocalStorage {
  MockSharedPreferenceLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<dynamic> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setDouble(
    String? key,
    num? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setMap(
    String? key,
    Map<dynamic, dynamic>? map,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMap,
          [
            key,
            map,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> setList(
    String? key,
    List<dynamic>? map,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setList,
          [
            key,
            map,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);
  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);
  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);
  @override
  _i2.Future<Map<dynamic, dynamic>> getMap(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getMap,
          [key],
        ),
        returnValue:
            _i2.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i2.Future<Map<dynamic, dynamic>>);
  @override
  List<dynamic> getList(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getList,
          [key],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);
  @override
  _i2.Future<bool?> clearData(String? key) => (super.noSuchMethod(
        Invocation.method(
          #clearData,
          [key],
        ),
        returnValue: _i2.Future<bool?>.value(),
      ) as _i2.Future<bool?>);
  @override
  _i2.Future<bool?> clearStorage() => (super.noSuchMethod(
        Invocation.method(
          #clearStorage,
          [],
        ),
        returnValue: _i2.Future<bool?>.value(),
      ) as _i2.Future<bool?>);
  @override
  _i2.Future<dynamic> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i11.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: '',
      ) as String);
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
      ) as String);
  @override
  _i12.GlobalKey<_i12.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(
        #nestedNavigationKey,
        [index],
      )) as _i12.GlobalKey<_i12.NavigatorState>?);
  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i11.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<T?>? navigateWithTransition<T>(
    _i12.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i12.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i11.Transition? transitionClass,
    _i11.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #navigateWithTransition,
        [page],
        {
          #opaque: opaque,
          #transition: transition,
          #duration: duration,
          #popGesture: popGesture,
          #id: id,
          #curve: curve,
          #fullscreenDialog: fullscreenDialog,
          #preventDuplicates: preventDuplicates,
          #transitionClass: transitionClass,
          #transitionStyle: transitionStyle,
          #routeName: routeName,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? replaceWithTransition<T>(
    _i12.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i12.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i11.Transition? transitionClass,
    _i11.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #replaceWithTransition,
        [page],
        {
          #opaque: opaque,
          #transition: transition,
          #duration: duration,
          #popGesture: popGesture,
          #id: id,
          #curve: curve,
          #fullscreenDialog: fullscreenDialog,
          #preventDuplicates: preventDuplicates,
          #transitionClass: transitionClass,
          #transitionStyle: transitionStyle,
          #routeName: routeName,
        },
      )) as _i2.Future<T?>?);
  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
      ) as bool);
  @override
  void popUntil(
    _i12.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i12.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #navigateTo,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #preventDuplicates: preventDuplicates,
          #parameters: parameters,
          #transition: transition,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? navigateToView<T>(
    _i12.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i12.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i11.Transition? transition,
    _i11.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #navigateToView,
        [view],
        {
          #arguments: arguments,
          #id: id,
          #opaque: opaque,
          #curve: curve,
          #duration: duration,
          #fullscreenDialog: fullscreenDialog,
          #popGesture: popGesture,
          #preventDuplicates: preventDuplicates,
          #transition: transition,
          #transitionStyle: transitionStyle,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i12.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #replaceWith,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #preventDuplicates: preventDuplicates,
          #parameters: parameters,
          #transition: transition,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearStackAndShow,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #parameters: parameters,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearStackAndShowView<T>(
    _i12.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearStackAndShowView,
        [view],
        {
          #arguments: arguments,
          #id: id,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearTillFirstAndShow,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #preventDuplicates: preventDuplicates,
          #parameters: parameters,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearTillFirstAndShowView<T>(
    _i12.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearTillFirstAndShowView,
        [view],
        {
          #arguments: arguments,
          #id: id,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i12.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #pushNamedAndRemoveUntil,
        [routeName],
        {
          #predicate: predicate,
          #arguments: arguments,
          #id: id,
        },
      )) as _i2.Future<T?>?);
}

/// A class which mocks [SnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackbarService extends _i1.Mock implements _i11.SnackbarService {
  MockSnackbarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSnackbarOpen => (super.noSuchMethod(
        Invocation.getter(#isSnackbarOpen),
        returnValue: false,
      ) as bool);
  @override
  void registerSnackbarConfig(_i11.SnackbarConfig? config) =>
      super.noSuchMethod(
        Invocation.method(
          #registerSnackbarConfig,
          [config],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomMainButtonBuilder({
    dynamic variant,
    _i12.Widget Function(
      String?,
      Function?,
    )?
        builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomMainButtonBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomSnackbarConfig({
    required dynamic variant,
    _i11.SnackbarConfig? config,
    _i11.SnackbarConfig Function()? configBuilder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomSnackbarConfig,
          [],
          {
            #variant: variant,
            #config: config,
            #configBuilder: configBuilder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showSnackbar({
    String? title = r'',
    required String? message,
    dynamic Function(dynamic)? onTap,
    Duration? duration = const Duration(seconds: 3),
    String? mainButtonTitle,
    void Function()? onMainButtonTapped,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showSnackbar,
          [],
          {
            #title: title,
            #message: message,
            #onTap: onTap,
            #duration: duration,
            #mainButtonTitle: mainButtonTitle,
            #onMainButtonTapped: onMainButtonTapped,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<dynamic>? showCustomSnackBar({
    required String? message,
    _i12.TextStyle? messageTextStyle,
    required dynamic variant,
    String? title,
    _i12.TextStyle? titleTextStyle,
    String? mainButtonTitle,
    _i12.ButtonStyle? mainButtonStyle,
    void Function()? onMainButtonTapped,
    Function? onTap,
    Duration? duration = const Duration(seconds: 1),
  }) =>
      (super.noSuchMethod(Invocation.method(
        #showCustomSnackBar,
        [],
        {
          #message: message,
          #messageTextStyle: messageTextStyle,
          #variant: variant,
          #title: title,
          #titleTextStyle: titleTextStyle,
          #mainButtonTitle: mainButtonTitle,
          #mainButtonStyle: mainButtonStyle,
          #onMainButtonTapped: onMainButtonTapped,
          #onTap: onTap,
          #duration: duration,
        },
      )) as _i2.Future<dynamic>?);
  @override
  _i2.Future<void> closeSnackbar() => (super.noSuchMethod(
        Invocation.method(
          #closeSnackbar,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [ThemeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeService extends _i1.Mock implements _i13.ThemeService {
  MockThemeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get themeCount => (super.noSuchMethod(
        Invocation.getter(#themeCount),
        returnValue: 0,
      ) as int);
  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
      ) as bool);
  @override
  _i13.ThemeManagerMode get selectedThemeMode => (super.noSuchMethod(
        Invocation.getter(#selectedThemeMode),
        returnValue: _i13.ThemeManagerMode.light,
      ) as _i13.ThemeManagerMode);
  @override
  void setThemeManager(_i14.ThemeManager? manager) => super.noSuchMethod(
        Invocation.method(
          #setThemeManager,
          [manager],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<dynamic> selectThemeAtIndex(int? themeIndex) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectThemeAtIndex,
          [themeIndex],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  void toggleDarkLightTheme() => super.noSuchMethod(
        Invocation.method(
          #toggleDarkLightTheme,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setThemeMode(_i13.ThemeManagerMode? themeManagerMode) =>
      super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [themeManagerMode],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i11.DialogService {
  MockDialogService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i11.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i12.Widget Function(
      _i12.BuildContext,
      _i11.DialogRequest<dynamic>,
      dynamic Function(_i11.DialogResponse<dynamic>),
    )?
        builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<_i11.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i15.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i15.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i11.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i2.Future<_i11.DialogResponse<dynamic>?>.value(),
      ) as _i2.Future<_i11.DialogResponse<dynamic>?>);
  @override
  _i2.Future<_i11.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i15.Color? barrierColor = const _i15.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i2.Future<_i11.DialogResponse<T>?>.value(),
      ) as _i2.Future<_i11.DialogResponse<T>?>);
  @override
  _i2.Future<_i11.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    String? confirmationTitle = r'Ok',
    bool? barrierDismissible = false,
    _i11.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #confirmationTitle: confirmationTitle,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i2.Future<_i11.DialogResponse<dynamic>?>.value(),
      ) as _i2.Future<_i11.DialogResponse<dynamic>?>);
  @override
  void completeDialog(_i11.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i11.BottomSheetService {
  MockBottomSheetService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setCustomSheetBuilders(Map<dynamic, _i11.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<_i11.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i2.Future<_i11.SheetResponse<dynamic>?>.value(),
      ) as _i2.Future<_i11.SheetResponse<dynamic>?>);
  @override
  _i2.Future<_i11.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i15.Color? barrierColor = const _i15.Color(2315255808),
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i2.Future<_i11.SheetResponse<T>?>.value(),
      ) as _i2.Future<_i11.SheetResponse<T>?>);
  @override
  void completeSheet(_i11.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DMApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDMApiService extends _i1.Mock implements _i16.DMApiService {
  MockDMApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<dynamic> getActiveDms() => (super.noSuchMethod(
        Invocation.method(
          #getActiveDms,
          [],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> getAllUsersInOrg() => (super.noSuchMethod(
        Invocation.method(
          #getAllUsersInOrg,
          [],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<String> roomCreator(String? friendId) => (super.noSuchMethod(
        Invocation.method(
          #roomCreator,
          [friendId],
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  _i2.Future<dynamic> sendDMs(
    String? roomID,
    String? memberID,
    String? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDMs,
          [
            roomID,
            memberID,
            message,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  dynamic getDMSocketId(String? channelId) =>
      super.noSuchMethod(Invocation.method(
        #getDMSocketId,
        [channelId],
      ));
  @override
  _i2.Future<List<_i17.DmModel>> getRoomMessages(String? roomID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoomMessages,
          [roomID],
        ),
        returnValue: _i2.Future<List<_i17.DmModel>>.value(<_i17.DmModel>[]),
      ) as _i2.Future<List<_i17.DmModel>>);
}

/// A class which mocks [ChannelsApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChannelsApiService extends _i1.Mock
    implements _i18.ChannelsApiService {
  MockChannelsApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StreamController<String> get controller => (super.noSuchMethod(
        Invocation.getter(#controller),
        returnValue: _FakeStreamController_0<String>(
          this,
          Invocation.getter(#controller),
        ),
      ) as _i2.StreamController<String>);
  @override
  set controller(_i2.StreamController<String>? _controller) =>
      super.noSuchMethod(
        Invocation.setter(
          #controller,
          _controller,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<List<dynamic>> getActiveChannels() => (super.noSuchMethod(
        Invocation.method(
          #getActiveChannels,
          [],
        ),
        returnValue: _i2.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<String> getChannelSocketId(String? channelId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannelSocketId,
          [channelId],
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  _i2.Future<Map<dynamic, dynamic>?> joinChannel(String? channelId) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinChannel,
          [channelId],
        ),
        returnValue: _i2.Future<Map<dynamic, dynamic>?>.value(),
      ) as _i2.Future<Map<dynamic, dynamic>?>);
  @override
  dynamic getChanelCreator(String? channelId) =>
      super.noSuchMethod(Invocation.method(
        #getChanelCreator,
        [channelId],
      ));
  @override
  _i2.Future<Map<dynamic, dynamic>?> addChannelMember(
    String? channelId,
    dynamic memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addChannelMember,
          [
            channelId,
            memberId,
          ],
        ),
        returnValue: _i2.Future<Map<dynamic, dynamic>?>.value(),
      ) as _i2.Future<Map<dynamic, dynamic>?>);
  @override
  _i2.Future<List<dynamic>> getChannelMessages(String? channelId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannelMessages,
          [channelId],
        ),
        returnValue: _i2.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<List<_i19.PinnedMessage>> getChannelPinnedMessages(
          String? channelId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannelPinnedMessages,
          [channelId],
        ),
        returnValue:
            _i2.Future<List<_i19.PinnedMessage>>.value(<_i19.PinnedMessage>[]),
      ) as _i2.Future<List<_i19.PinnedMessage>>);
  @override
  _i2.Future<bool> changeChannelMessagePinnedState(
    String? channelId,
    String? messageId,
    String? userId,
    bool? pinned,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeChannelMessagePinnedState,
          [
            channelId,
            messageId,
            userId,
            pinned,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<dynamic> sendChannelMessages(
    String? channelId,
    String? userId,
    String? message, [
    List<String>? media,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendChannelMessages,
          [
            channelId,
            userId,
            message,
            media,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i20.ChannelModel>> fetchChannel() => (super.noSuchMethod(
        Invocation.method(
          #fetchChannel,
          [],
        ),
        returnValue:
            _i2.Future<List<_i20.ChannelModel>>.value(<_i20.ChannelModel>[]),
      ) as _i2.Future<List<_i20.ChannelModel>>);
  @override
  _i2.Future<bool> createChannels({
    required String? name,
    required String? description,
    required bool? private,
    String? email,
    String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChannels,
          [],
          {
            #name: name,
            #description: description,
            #private: private,
            #email: email,
            #id: id,
          },
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<dynamic> deleteChannelMessage(
    String? orgId,
    String? channelId,
    String? messageId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteChannelMessage,
          [
            orgId,
            channelId,
            messageId,
            userId,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<bool> deleteChannel(
    String? orgId,
    String? channelId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteChannel,
          [
            orgId,
            channelId,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<List<_i21.ChannelMember>?> getChannelMembers(dynamic id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannelMembers,
          [id],
        ),
        returnValue: _i2.Future<List<_i21.ChannelMember>?>.value(),
      ) as _i2.Future<List<_i21.ChannelMember>?>);
  @override
  _i2.Future<void>? dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>?);
}

/// A class which mocks [CentrifugeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCentrifugeService extends _i1.Mock implements _i22.CentrifugeService {
  MockCentrifugeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StreamController<dynamic> get messageStreamController =>
      (super.noSuchMethod(
        Invocation.getter(#messageStreamController),
        returnValue: _FakeStreamController_0<dynamic>(
          this,
          Invocation.getter(#messageStreamController),
        ),
      ) as _i2.StreamController<dynamic>);
  @override
  set messageStreamController(
          _i2.StreamController<dynamic>? _messageStreamController) =>
      super.noSuchMethod(
        Invocation.setter(
          #messageStreamController,
          _messageStreamController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, _i23.Subscription> get subList => (super.noSuchMethod(
        Invocation.getter(#subList),
        returnValue: <String, _i23.Subscription>{},
      ) as Map<String, _i23.Subscription>);
  @override
  set subList(Map<String, _i23.Subscription>? _subList) => super.noSuchMethod(
        Invocation.setter(
          #subList,
          _subList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.StreamSubscription<dynamic> listen({
    required String? socketId,
    required dynamic channelId,
    required dynamic Function(Map<dynamic, dynamic>)? onData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [],
          {
            #socketId: socketId,
            #channelId: channelId,
            #onData: onData,
          },
        ),
        returnValue: _FakeStreamSubscription_1<dynamic>(
          this,
          Invocation.method(
            #listen,
            [],
            {
              #socketId: socketId,
              #channelId: channelId,
              #onData: onData,
            },
          ),
        ),
      ) as _i2.StreamSubscription<dynamic>);
  @override
  _i2.StreamSubscription<dynamic> listenDM({
    required String? socketId,
    required dynamic roomID,
    required dynamic Function(Map<dynamic, dynamic>)? onData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenDM,
          [],
          {
            #socketId: socketId,
            #roomID: roomID,
            #onData: onData,
          },
        ),
        returnValue: _FakeStreamSubscription_1<dynamic>(
          this,
          Invocation.method(
            #listenDM,
            [],
            {
              #socketId: socketId,
              #roomID: roomID,
              #onData: onData,
            },
          ),
        ),
      ) as _i2.StreamSubscription<dynamic>);
  @override
  _i2.StreamSubscription<dynamic> onNotificationReceived({
    required String? channelId,
    required dynamic Function(Map<dynamic, dynamic>)? onData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onNotificationReceived,
          [],
          {
            #channelId: channelId,
            #onData: onData,
          },
        ),
        returnValue: _FakeStreamSubscription_1<dynamic>(
          this,
          Invocation.method(
            #onNotificationReceived,
            [],
            {
              #channelId: channelId,
              #onData: onData,
            },
          ),
        ),
      ) as _i2.StreamSubscription<dynamic>);
  @override
  bool hasSubscribed(String? socketId) => (super.noSuchMethod(
        Invocation.method(
          #hasSubscribed,
          [socketId],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i2.Future<_i2.Stream<dynamic>?> subscribe(String? channelSocketId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [channelSocketId],
        ),
        returnValue: _i2.Future<_i2.Stream<dynamic>?>.value(),
      ) as _i2.Future<_i2.Stream<dynamic>?>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ZuriApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockZuriApi extends _i1.Mock implements _i5.ZuriApi {
  MockZuriApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_2(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i3.Dio);
  @override
  _i2.StreamController<String> get controller => (super.noSuchMethod(
        Invocation.getter(#controller),
        returnValue: _FakeStreamController_0<String>(
          this,
          Invocation.getter(#controller),
        ),
      ) as _i2.StreamController<String>);
  @override
  set controller(_i2.StreamController<String>? _controller) =>
      super.noSuchMethod(
        Invocation.setter(
          #controller,
          _controller,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<dynamic> get(
    String? string, {
    Map<String, dynamic>? queryParameters,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [string],
          {
            #queryParameters: queryParameters,
            #token: token,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> post(
    String? string, {
    required Map<String, dynamic>? body,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [string],
          {
            #body: body,
            #token: token,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> postDM(
    String? endpoint, {
    required Map<String, dynamic>? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postDM,
          [endpoint],
          {#body: body},
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> getDM(
    String? roomID,
    String? orgId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDM,
          [
            roomID,
            orgId,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> put(
    String? string, {
    required Map<String, dynamic>? body,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [string],
          {
            #body: body,
            #token: token,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<_i24.ApiResponse?> patch(
    String? path, {
    Map<String, dynamic>? body,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #body: body,
            #token: token,
          },
        ),
        returnValue: _i2.Future<_i24.ApiResponse?>.value(),
      ) as _i2.Future<_i24.ApiResponse?>);
  @override
  _i2.Future<_i24.ApiResponse?> delete(
    String? string, {
    Map<String, dynamic>? body,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [string],
          {
            #body: body,
            #token: token,
          },
        ),
        returnValue: _i2.Future<_i24.ApiResponse?>.value(),
      ) as _i2.Future<_i24.ApiResponse?>);
  @override
  _i2.Future<dynamic> login({
    required String? email,
    required String? password,
    dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
            #token: token,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> signUp({
    required String? email,
    required String? password,
    required String? firstName,
    required String? lastName,
    required String? displayName,
    required String? phoneNumber,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
            #firstName: firstName,
            #lastName: lastName,
            #displayName: displayName,
            #phoneNumber: phoneNumber,
            #token: token,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i6.OrganizationModel>> fetchListOfOrganizations(
          dynamic token) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchListOfOrganizations,
          [token],
        ),
        returnValue: _i2.Future<List<_i6.OrganizationModel>>.value(
            <_i6.OrganizationModel>[]),
      ) as _i2.Future<List<_i6.OrganizationModel>>);
  @override
  _i2.Future<List<_i6.OrganizationModel>> getJoinedOrganizations(
    dynamic token,
    String? email,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJoinedOrganizations,
          [
            token,
            email,
          ],
        ),
        returnValue: _i2.Future<List<_i6.OrganizationModel>>.value(
            <_i6.OrganizationModel>[]),
      ) as _i2.Future<List<_i6.OrganizationModel>>);
  @override
  _i2.Future<dynamic> fetchOrganizationInfo(
    String? id,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchOrganizationInfo,
          [
            id,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> fetchOrganizationByUrl(
    String? url,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchOrganizationByUrl,
          [
            url,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<bool> joinOrganization(
    String? orgId,
    String? email,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinOrganization,
          [
            orgId,
            email,
            token,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<String> createOrganization(
    String? email,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrganization,
          [
            email,
            token,
          ],
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  _i2.Future<dynamic> updateOrgUrl(
    String? orgId,
    String? url,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrgUrl,
          [
            orgId,
            url,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> updateOrgName(
    String? orgId,
    String? name,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrgName,
          [
            orgId,
            name,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> updateOrgLogo(
    String? orgId,
    _i25.File? image,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrgLogo,
          [
            orgId,
            image,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<void> addMemberToChannel(
    String? channelId,
    String? orgId,
    String? userId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMemberToChannel,
          [
            channelId,
            orgId,
            userId,
            token,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> addMemberToOrganization(
    String? orgId,
    String? email,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMemberToOrganization,
          [
            orgId,
            email,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i26.UserSearch>> fetchMembersInOrganization(
    String? orgId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMembersInOrganization,
          [
            orgId,
            token,
          ],
        ),
        returnValue:
            _i2.Future<List<_i26.UserSearch>>.value(<_i26.UserSearch>[]),
      ) as _i2.Future<List<_i26.UserSearch>>);
  @override
  _i2.Future<dynamic> getChannelSocketId(
    String? channelId,
    String? orgId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannelSocketId,
          [
            channelId,
            orgId,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<dynamic>> getActiveRooms(
    String? orgId,
    String? userId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveRooms,
          [
            orgId,
            userId,
            token,
          ],
        ),
        returnValue: _i2.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<List<dynamic>> getActiveDms(
    String? orgId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveDms,
          [
            orgId,
            token,
          ],
        ),
        returnValue: _i2.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<Map<dynamic, dynamic>> joinChannel(
    String? channelId,
    String? userId,
    String? orgId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinChannel,
          [
            channelId,
            userId,
            orgId,
            token,
          ],
        ),
        returnValue:
            _i2.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i2.Future<Map<dynamic, dynamic>>);
  @override
  _i2.Future<dynamic> getChannelMessages(
    String? channelId,
    String? orgId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannelMessages,
          [
            channelId,
            orgId,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> sendChannelMessages(
    String? channelId,
    String? userId,
    String? orgId,
    String? message,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendChannelMessages,
          [
            channelId,
            userId,
            orgId,
            message,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<dynamic>> getRepliesToMessages(
    dynamic channelMessageId,
    dynamic orgId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRepliesToMessages,
          [
            channelMessageId,
            orgId,
          ],
        ),
        returnValue: _i2.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<bool> addReplyToMessage(
    String? channelMessageId,
    dynamic content,
    dynamic files,
    dynamic orgId,
    dynamic userId,
    dynamic channelId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addReplyToMessage,
          [
            channelMessageId,
            content,
            files,
            orgId,
            userId,
            channelId,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<List<_i20.ChannelModel>> fetchChannel(
    String? orgId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchChannel,
          [
            orgId,
            token,
          ],
        ),
        returnValue:
            _i2.Future<List<_i20.ChannelModel>>.value(<_i20.ChannelModel>[]),
      ) as _i2.Future<List<_i20.ChannelModel>>);
  @override
  _i2.Future<bool> createChannels({
    required String? name,
    required String? owner,
    required String? email,
    required String? orgId,
    required String? description,
    required bool? private,
    dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChannels,
          [],
          {
            #name: name,
            #owner: owner,
            #email: email,
            #orgId: orgId,
            #description: description,
            #private: private,
            #token: token,
          },
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  dynamic getChannelPage(
    String? id,
    String? orgId,
    dynamic token,
  ) =>
      super.noSuchMethod(Invocation.method(
        #getChannelPage,
        [
          id,
          orgId,
          token,
        ],
      ));
  @override
  dynamic getChannelMembers(
    String? id,
    String? orgId,
    dynamic token,
  ) =>
      super.noSuchMethod(Invocation.method(
        #getChannelMembers,
        [
          id,
          orgId,
          token,
        ],
      ));
  @override
  dynamic inviteToOrganizationWithNormalMail(
    String? organizationId,
    dynamic body,
    dynamic token,
  ) =>
      super.noSuchMethod(Invocation.method(
        #inviteToOrganizationWithNormalMail,
        [
          organizationId,
          body,
          token,
        ],
      ));
  @override
  List<_i12.ThemeData> getThemes() => (super.noSuchMethod(
        Invocation.method(
          #getThemes,
          [],
        ),
        returnValue: <_i12.ThemeData>[],
      ) as List<_i12.ThemeData>);
  @override
  void sendGetRequest(dynamic endpoint) => super.noSuchMethod(
        Invocation.method(
          #sendGetRequest,
          [endpoint],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<dynamic> sendPostRequest(
    dynamic body,
    dynamic endpoint,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPostRequest,
          [
            body,
            endpoint,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> sendPatchRequest(
    dynamic body,
    dynamic endpoint,
    dynamic userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPatchRequest,
          [
            body,
            endpoint,
            userId,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> allChannelsList(
    String? currentOrgId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #allChannelsList,
          [
            currentOrgId,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> joinedChannelsList(
    String? currentOrgId,
    String? currentUserId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinedChannelsList,
          [
            currentOrgId,
            currentUserId,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> fetchListOfMembers(
    String? currentOrgId,
    String? channelId,
    dynamic token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchListOfMembers,
          [
            currentOrgId,
            channelId,
            token,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i4.Failure handleApiError(_i3.DioError? e) => (super.noSuchMethod(
        Invocation.method(
          #handleApiError,
          [e],
        ),
        returnValue: _FakeFailure_3(
          this,
          Invocation.method(
            #handleApiError,
            [e],
          ),
        ),
      ) as _i4.Failure);
  @override
  _i2.Future<String> uploadImage(
    _i25.File? image, {
    required String? token,
    required String? pluginId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImage,
          [image],
          {
            #token: token,
            #pluginId: pluginId,
          },
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i27.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: false,
      ) as bool);
  @override
  set hasConnection(bool? _hasConnection) => super.noSuchMethod(
        Invocation.setter(
          #hasConnection,
          _hasConnection,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i28.ConnectivityStatus get networkStatus => (super.noSuchMethod(
        Invocation.getter(#networkStatus),
        returnValue: _i28.ConnectivityStatus.wifi,
      ) as _i28.ConnectivityStatus);
  @override
  set networkStatus(_i28.ConnectivityStatus? _networkStatus) =>
      super.noSuchMethod(
        Invocation.setter(
          #networkStatus,
          _networkStatus,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.StreamController<_i28.ConnectivityStatus>
      get connectionChangeController => (super.noSuchMethod(
            Invocation.getter(#connectionChangeController),
            returnValue: _FakeStreamController_0<_i28.ConnectivityStatus>(
              this,
              Invocation.getter(#connectionChangeController),
            ),
          ) as _i2.StreamController<_i28.ConnectivityStatus>);
  @override
  set connectionChangeController(
          _i2.StreamController<_i28.ConnectivityStatus>?
              _connectionChangeController) =>
      super.noSuchMethod(
        Invocation.setter(
          #connectionChangeController,
          _connectionChangeController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Stream<_i28.ConnectivityStatus> get connectionChange =>
      (super.noSuchMethod(
        Invocation.getter(#connectionChange),
        returnValue: _i2.Stream<_i28.ConnectivityStatus>.empty(),
      ) as _i2.Stream<_i28.ConnectivityStatus>);
  @override
  void initialize() => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<bool> checkConnection() => (super.noSuchMethod(
        Invocation.method(
          #checkConnection,
          [],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  void onChange() => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [JumpToApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockJumpToApi extends _i1.Mock implements _i29.JumpToApi {
  MockJumpToApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get allChannelsPath => (super.noSuchMethod(
        Invocation.getter(#allChannelsPath),
        returnValue: '',
      ) as String);
  @override
  String get joinedChannelsPath => (super.noSuchMethod(
        Invocation.getter(#joinedChannelsPath),
        returnValue: '',
      ) as String);
  @override
  Map<String, dynamic> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  set headers(Map<String, dynamic>? _headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          _headers,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<List<_i30.ChannelsSearch>> allChannelsList() =>
      (super.noSuchMethod(
        Invocation.method(
          #allChannelsList,
          [],
        ),
        returnValue: _i2.Future<List<_i30.ChannelsSearch>>.value(
            <_i30.ChannelsSearch>[]),
      ) as _i2.Future<List<_i30.ChannelsSearch>>);
  @override
  _i2.Future<List<_i30.ChannelsSearch>> joinedChannelsList() =>
      (super.noSuchMethod(
        Invocation.method(
          #joinedChannelsList,
          [],
        ),
        returnValue: _i2.Future<List<_i30.ChannelsSearch>>.value(
            <_i30.ChannelsSearch>[]),
      ) as _i2.Future<List<_i30.ChannelsSearch>>);
  @override
  _i2.Future<List<_i26.UserSearch>> fetchListOfMembers() => (super.noSuchMethod(
        Invocation.method(
          #fetchListOfMembers,
          [],
        ),
        returnValue:
            _i2.Future<List<_i26.UserSearch>>.value(<_i26.UserSearch>[]),
      ) as _i2.Future<List<_i26.UserSearch>>);
  @override
  _i2.Future<List<_i26.NewUser>> fetchList() => (super.noSuchMethod(
        Invocation.method(
          #fetchList,
          [],
        ),
        returnValue: _i2.Future<List<_i26.NewUser>>.value(<_i26.NewUser>[]),
      ) as _i2.Future<List<_i26.NewUser>>);
}

/// A class which mocks [MediaService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaService extends _i1.Mock implements _i31.MediaService {
  MockMediaService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ZuriApi get zuriApi => (super.noSuchMethod(
        Invocation.getter(#zuriApi),
        returnValue: _FakeZuriApi_4(
          this,
          Invocation.getter(#zuriApi),
        ),
      ) as _i5.ZuriApi);
  @override
  _i2.Future<_i25.File?> getImage({required bool? fromGallery}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImage,
          [],
          {#fromGallery: fromGallery},
        ),
        returnValue: _i2.Future<_i25.File?>.value(),
      ) as _i2.Future<_i25.File?>);
  @override
  _i2.Future<_i25.File?> getVideo({required bool? fromGallery}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideo,
          [],
          {#fromGallery: fromGallery},
        ),
        returnValue: _i2.Future<_i25.File?>.value(),
      ) as _i2.Future<_i25.File?>);
  @override
  _i2.Future<String?> uploadImage(
    _i25.File? file,
    String? pluginId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImage,
          [
            file,
            pluginId,
          ],
        ),
        returnValue: _i2.Future<String?>.value(),
      ) as _i2.Future<String?>);
}

/// A class which mocks [OrganizationApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizationApiService extends _i1.Mock
    implements _i32.OrganizationApiService {
  MockOrganizationApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<List<_i6.OrganizationModel>> fetchListOfOrganizations() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchListOfOrganizations,
          [],
        ),
        returnValue: _i2.Future<List<_i6.OrganizationModel>>.value(
            <_i6.OrganizationModel>[]),
      ) as _i2.Future<List<_i6.OrganizationModel>>);
  @override
  _i2.Future<List<_i6.OrganizationModel>> getJoinedOrganizations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getJoinedOrganizations,
          [],
        ),
        returnValue: _i2.Future<List<_i6.OrganizationModel>>.value(
            <_i6.OrganizationModel>[]),
      ) as _i2.Future<List<_i6.OrganizationModel>>);
  @override
  _i2.Future<_i6.OrganizationModel> fetchOrganizationInfo(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchOrganizationInfo,
          [id],
        ),
        returnValue:
            _i2.Future<_i6.OrganizationModel>.value(_FakeOrganizationModel_5(
          this,
          Invocation.method(
            #fetchOrganizationInfo,
            [id],
          ),
        )),
      ) as _i2.Future<_i6.OrganizationModel>);
  @override
  _i2.Future<_i6.OrganizationModel> fetchOrganizationByUrl(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchOrganizationByUrl,
          [url],
        ),
        returnValue:
            _i2.Future<_i6.OrganizationModel>.value(_FakeOrganizationModel_5(
          this,
          Invocation.method(
            #fetchOrganizationByUrl,
            [url],
          ),
        )),
      ) as _i2.Future<_i6.OrganizationModel>);
  @override
  _i2.Future<bool> joinOrganization(String? orgId) => (super.noSuchMethod(
        Invocation.method(
          #joinOrganization,
          [orgId],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<String> createOrganization(String? email) => (super.noSuchMethod(
        Invocation.method(
          #createOrganization,
          [email],
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  _i2.Future<void> updateOrgUrl(
    String? orgId,
    String? url,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrgUrl,
          [
            orgId,
            url,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> updateOrgName(
    String? orgId,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrgName,
          [
            orgId,
            name,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> updateOrgLogo(
    String? orgId,
    String? url,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrgLogo,
          [
            orgId,
            url,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> addMemberToOrganization(
    String? orgId,
    String? email,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMemberToOrganization,
          [
            orgId,
            email,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<List<_i26.UserSearch>> fetchMembersInOrganization(String? orgId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMembersInOrganization,
          [orgId],
        ),
        returnValue:
            _i2.Future<List<_i26.UserSearch>>.value(<_i26.UserSearch>[]),
      ) as _i2.Future<List<_i26.UserSearch>>);
  @override
  _i2.Future<_i7.OrganizationMemberModelList> getOrganizationMemberList(
          String? orgId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrganizationMemberList,
          [orgId],
        ),
        returnValue: _i2.Future<_i7.OrganizationMemberModelList>.value(
            _FakeOrganizationMemberModelList_6(
          this,
          Invocation.method(
            #getOrganizationMemberList,
            [orgId],
          ),
        )),
      ) as _i2.Future<_i7.OrganizationMemberModelList>);
}
